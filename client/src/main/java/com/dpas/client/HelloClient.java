package com.dpas.client;

/* these are generated by the hello-world-server contract */
import com.dpas.HelloWorld;
import com.dpas.HelloWorldServiceGrpc;

import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.logging.Logger;
import io.grpc.StatusRuntimeException;
import java.util.logging.Level;
import io.grpc.ManagedChannel;
import io.grpc.Channel;
import io.grpc.ManagedChannelBuilder;

public class HelloClient {
	private static final Logger logger = Logger.getLogger(HelloClient.class.getName());
	private final HelloWorldServiceGrpc.HelloWorldServiceBlockingStub blockingStub;

	public HelloClient(Channel channel) {
		blockingStub = HelloWorldServiceGrpc.newBlockingStub(channel);
	}

	/** Say hello to server. */
	public void greet(String name) {
		logger.info("Will try to greet " + name + " ...");
		HelloWorld.HelloRequest request = HelloWorld.HelloRequest.newBuilder().setName(name).build();
		HelloWorld.HelloResponse response;
		try {
			response = blockingStub.greeting(request);
		} catch (StatusRuntimeException e) {
			logger.log(Level.WARNING, "RPC failed: {0}", e.getStatus());
			return;
		}
		logger.info("Greeting: " + response.getGreeting());
	}

	public static void main(String[] args) throws Exception {

		if (args.length < 2) {
			System.err.println("Argument(s) missing!");
			System.err.printf("Usage: java %s host port%n", HelloClient.class.getName());
			return;
		}

		final String host = args[0];
		final int port = Integer.parseInt(args[1]);
		final String target = host + ":" + port;


		final ManagedChannel channel = ManagedChannelBuilder.forTarget(target).usePlaintext().build();

		HelloWorldServiceGrpc.HelloWorldServiceBlockingStub stub = HelloWorldServiceGrpc.newBlockingStub(channel);

		ClientAPI library = ClientAPI.getInstance();

		String input = "register|user1\nregister|user2\npost|user1|ola isto e um teste\nread|user1|0\npostGeneral|user1|teste do geral|1\nreadGeneral|0";
				String[] commands = input.split("\n");
				for(String command: commands){
					library.receive(stub, command);
				}
		channel.shutdownNow();
	}

}
