package com.dpas.server;

/* these are generated by the hello-world-server contract */
import com.dpas.HelloWorld;
import com.dpas.HelloWorldServiceGrpc;
import io.grpc.stub.StreamObserver;

import java.io.File;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.*;

public class HelloWorldServiceImpl extends HelloWorldServiceGrpc.HelloWorldServiceImplBase {

	public static final String USERS_FILE = "users.tmp";

	public void checkUsersFile() {

		File f = new File(USERS_FILE);
		System.out.println("File users exists: " + f.isFile());
		//System.out.println(System.getProperty("user.dir"));

		if (!f.isFile()) {
			try {
				f.createNewFile();
				writeUsersToFile(new HashMap<String, String>());
				System.out.println("Users file not found. New instance has been created.");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public synchronized void writeUsersToFile(Map<String, String> users) {

		try {
			FileOutputStream fos = new FileOutputStream(USERS_FILE);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(users);
			System.out.println("Users successfully written to file.");
			oos.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public synchronized Map<String, String> readUsersFromFile() {

		try {
			FileInputStream fis = new FileInputStream(USERS_FILE);
			ObjectInputStream ois = new ObjectInputStream(fis);
			Map<String, String> users = (HashMap<String, String>) ois.readObject();
			System.out.println("Users successfully read from file.");
			ois.close();
			return users;

		} catch (Exception e) {
			e.printStackTrace();
		}

		return new HashMap<String, String>();
	}

	@Override
	public void greeting(HelloWorld.HelloRequest request, StreamObserver<HelloWorld.HelloResponse> responseObserver) {

		// HelloRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		// You must use a builder to construct a new Protobuffer object
		HelloWorld.HelloResponse response = HelloWorld.HelloResponse.newBuilder()
				.setGreeting("Hello " + request.getName()).build();

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

	@Override
	public void register(HelloWorld.RegisterRequest request, StreamObserver<HelloWorld.RegisterResponse> responseObserver) {

		// HelloRequest has auto-generated toString method that shows its contents
		System.out.println(request);

		checkUsersFile();

		Map<String, String> users = readUsersFromFile();

		users.put(request.getKey(), request.getUsername());

		System.out.println("Users: " + users);

		writeUsersToFile(users);

		// You must use a builder to construct a new Protobuffer object
		HelloWorld.RegisterResponse response = HelloWorld.RegisterResponse.newBuilder()
				.setResult(true).build();

		// Use responseObserver to send a single response back
		responseObserver.onNext(response);

		// When you are done, you must call onCompleted
		responseObserver.onCompleted();
	}

}
