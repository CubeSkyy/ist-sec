package com.dpas.server;

/* these are generated by the hello-world-server contract */

import com.dpas.HelloWorld;
import com.dpas.HelloWorldServiceGrpc;
import io.grpc.Grpc;
import io.grpc.Status;
import io.grpc.stub.StreamObserver;
import org.apache.commons.lang3.RandomStringUtils;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

public class HelloWorldServiceImpl extends HelloWorldServiceGrpc.HelloWorldServiceImplBase {

    public static HelloWorldServiceImpl instance = null;
    private HashMap<String, String> usersMap;
    private HashMap<String, ArrayList<HelloWorld.Announcement>> particularMap;
    private ArrayList<HelloWorld.Announcement> generalMap;


    private int postId;

    public static final String USERS_FILE = "users.tmp";
    public static final String PARTICULAR_FILE = "particular.tmp";
    public static final String GENERAL_FILE = "general.tmp";
    public static final String POSTID_FILE = "postid.tmp";
    public static final String MSG_USERS = "Users successfully read/written to file.";
    public static final String MSG_PARTICULAR = "Particular post successfully read/written to file.";
    public static final String MSG_GENERAL = "General post successfully read/written to file.";
    public static final String MSG_POSTID = "Current post ID successfully read/written to file.";



    public static HelloWorldServiceImpl getInstance() {
        if(instance == null){
            instance = new HelloWorldServiceImpl();
        }
        return instance;
    }


    private HelloWorldServiceImpl(){
        checkFile(USERS_FILE);
        usersMap = (HashMap<String, String>) readFromFile(USERS_FILE, MSG_USERS);

        checkFile(PARTICULAR_FILE);
        particularMap = (HashMap<String, ArrayList<HelloWorld.Announcement>>) readFromFile(PARTICULAR_FILE, MSG_PARTICULAR);

        checkFile(GENERAL_FILE);
        generalMap = (ArrayList<HelloWorld.Announcement>) readFromFile(GENERAL_FILE, MSG_GENERAL);


        checkFile(POSTID_FILE);
        postId = (Integer) readFromFile(POSTID_FILE, MSG_POSTID);
    }


    private HashMap<String, String> getUsersMap() {
        return usersMap;
    }

    private HashMap<String, ArrayList<HelloWorld.Announcement>> getParticularMap() {
        return particularMap;
    }

    private ArrayList<HelloWorld.Announcement> getGeneralMap() {
        return generalMap;
    }

    private int getPostId() {
        return postId;
    }


    public void checkFile(String filename) {

        File f = new File(filename);
        System.out.println("File " + filename + " exists: " + f.isFile());

        if (!f.isFile()) {
            try {
                f.createNewFile();
                switch (filename) {
                    case USERS_FILE:
                        writeToFile(new HashMap<String, String>(), USERS_FILE, MSG_USERS);
                        break;

                    case PARTICULAR_FILE:
                        writeToFile(new HashMap<String, ArrayList<HelloWorld.Announcement>>(), PARTICULAR_FILE, MSG_PARTICULAR);
                        break;

                    case GENERAL_FILE:
                        writeToFile(new ArrayList<HelloWorld.Announcement>(), GENERAL_FILE, MSG_GENERAL);
                        break;

                    case POSTID_FILE:
                        writeToFile(1, POSTID_FILE, MSG_POSTID);
                        break;

                    default:
                        System.err.println("Invalid filename. Could not write to file.");
                        break;
                }

                System.out.println("" + filename + " file not found. New instance has been created.");

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void writeToFile(Object users, String type, String msg) {

        try {
            FileOutputStream fos = new FileOutputStream(type+"Backup");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(users);
            System.out.println(msg);
            oos.close();
            Files.move(Paths.get(type+"Backup"), Paths.get(type), StandardCopyOption.ATOMIC_MOVE);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public Object readFromFile(String type, String msg) {

        try {
            FileInputStream fis = new FileInputStream(type);
            ObjectInputStream ois = new ObjectInputStream(fis);
            Object users = ois.readObject();
            System.out.println(msg);
            ois.close();
            return users;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return new Object();
    }

    @Override
    public void greeting(HelloWorld.HelloRequest request, StreamObserver<HelloWorld.HelloResponse> responseObserver) {

        // HelloRequest has auto-generated toString method that shows its contents
        System.out.println(request);

        // You must use a builder to construct a new Protobuffer object
        HelloWorld.HelloResponse response = HelloWorld.HelloResponse.newBuilder()
                .setGreeting("Hello " + request.getName()).build();

        // Use responseObserver to send a single response back
        responseObserver.onNext(response);

        // When you are done, you must call onCompleted
        responseObserver.onCompleted();
    }

    @Override
    public synchronized void register(HelloWorld.RegisterRequest request, StreamObserver<HelloWorld.RegisterResponse> responseObserver) {

        // HelloRequest has auto-generated toString method that shows its contents
        System.out.println(request);

        String key = request.getKey();

		/*
			TODO check if public key is owned by user with a digital signature
		*/

        System.out.println("Class of retrieved info: " + getUsersMap().getClass().getName());

        if (!getUsersMap().containsKey(key)) {
            getUsersMap().put(key, null);
            writeToFile(getUsersMap(), USERS_FILE, MSG_USERS);
        } else
            System.out.println("User is already registered.");

        System.out.println("Users: " + getUsersMap());


        // You must use a builder to construct a new Protobuffer object
        HelloWorld.RegisterResponse response = HelloWorld.RegisterResponse.newBuilder()
                .setResult(true).build();

        // Use responseObserver to send a single response back
        responseObserver.onNext(response);

        // When you are done, you must call onCompleted
        responseObserver.onCompleted();
    }

    @Override
    public synchronized void getToken(HelloWorld.GetTokenRequest request, StreamObserver<HelloWorld.GetTokenResponse> responseObserver) {
        // HelloRequest has auto-generated toString method that shows its contents
        System.out.println(request);

        String key = request.getKey();

		/*
			TODO check if public key is owned by user with a digital signature
		*/

        System.out.println("Class of retrieved info: " + getUsersMap().getClass().getName());

        if (!getUsersMap().containsKey(key)) {
            Status status = Status.INVALID_ARGUMENT;
            status = status.withDescription("User is not registered");
            responseObserver.onError(status.asRuntimeException());
        }

        String token = RandomStringUtils.randomAlphanumeric(10);

        getUsersMap().replace(key, token);
        writeToFile(getUsersMap(), USERS_FILE, MSG_USERS);

        System.out.println("Users: " + usersMap);


        // You must use a builder to construct a new Protobuffer object
        HelloWorld.GetTokenResponse response = HelloWorld.GetTokenResponse.newBuilder()
                .setToken(token).build();

        Timer timer = new Timer(30000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {

                System.out.println("Class of retrieved info: " + getUsersMap().getClass().getName());

                if (getUsersMap().get(key).equals(token)) {

                    getUsersMap().replace(key, null);
                    writeToFile(getUsersMap(), USERS_FILE, MSG_USERS);

                    System.out.println("User token expired: " + getUsersMap());
                }
            }
        });
        timer.setRepeats(false);
        timer.start();


        // Use responseObserver to send a single response back
        responseObserver.onNext(response);

        // When you are done, you must call onCompleted
        responseObserver.onCompleted();
    }

    @Override
    public synchronized void post(HelloWorld.PostRequest request, StreamObserver<HelloWorld.PostResponse> responseObserver) {

        // HelloRequest has auto-generated toString method that shows its contents
        System.out.println(request);

        HelloWorld.Announcement post = request.getPost();
        //List<HelloWorld.Announcement> a = post.getAList();
        System.out.println("A: " + post.getAList());

        String key = post.getKey();
        String message = post.getMessage();

        if (message.length() > 255) {
            Status status = Status.INVALID_ARGUMENT;
            status = status.withDescription("Invalid message length. Message needs to be smaller than 255 characters.");
            responseObserver.onError(status.asRuntimeException());
        }

        System.out.println("Class of retrieved info: " + getUsersMap().getClass().getName());

        if (!getUsersMap().containsKey(key)) {
            Status status = Status.INVALID_ARGUMENT;
            status = status.withDescription("User is not registered");
            responseObserver.onError(status.asRuntimeException());
        }

        // TODO check if signature corresponds to message+announcement+token
        // TODO remove token from file

        postId++;
        writeToFile(getPostId(), POSTID_FILE, MSG_POSTID);


        HelloWorld.Announcement.Builder postBuilder = post.toBuilder();
        postBuilder.setPostId(getPostId());
        postBuilder.setToken("");
        post = postBuilder.build();

        System.out.println("Class of retrieved info: " + getParticularMap().getClass().getName());

        if (!getParticularMap().containsKey(key)) {
            ArrayList<HelloWorld.Announcement> tmp = new ArrayList<HelloWorld.Announcement>();
            tmp.add(post);
            getParticularMap().put(key, tmp);
        } else {
            ArrayList<HelloWorld.Announcement> tmp = getParticularMap().get(key);
            tmp.add(post);
            getParticularMap().replace(key, tmp);
        }

        writeToFile(getParticularMap(), PARTICULAR_FILE, MSG_PARTICULAR);

        System.out.println("Particular posts: " + getParticularMap());

        // You must use a builder to construct a new Protobuffer object
        HelloWorld.PostResponse response = HelloWorld.PostResponse.newBuilder()
                .setResult(true).build();

        // Use responseObserver to send a single response back
        responseObserver.onNext(response);

        // When you are done, you must call onCompleted
        responseObserver.onCompleted();
    }


    @Override
    public synchronized void postGeneral(HelloWorld.PostGeneralRequest request, StreamObserver<HelloWorld.PostGeneralResponse> responseObserver) {

        // HelloRequest has auto-generated toString method that shows its contents
        System.out.println(request);

        HelloWorld.Announcement post = request.getPost();
        //List<HelloWorld.Announcement> a = post.getAList();
        System.out.println("A: " + post.getAList());

        String key = post.getKey();
        String message = post.getMessage();

        if (message.length() > 255) {
            Status status = Status.INVALID_ARGUMENT;
            status = status.withDescription("Invalid message length. Message needs to be smaller than 255 characters.");
            responseObserver.onError(status.asRuntimeException());
        }

        System.out.println("Class of retrieved info: " + getUsersMap().getClass().getName());

        if (!getUsersMap().containsKey(key)) {
            Status status = Status.INVALID_ARGUMENT;
            status = status.withDescription("User is not registered");
            responseObserver.onError(status.asRuntimeException());
        }

        // TODO check if signature corresponds to message+announcement+token
        // TODO remove  token from file
        postId++;
        writeToFile(getPostId(), POSTID_FILE, MSG_POSTID);

        HelloWorld.Announcement.Builder postBuilder = post.toBuilder();
        postBuilder.setPostId(getPostId());
        postBuilder.setToken("");
        post = postBuilder.build();

        System.out.println("Class of retrieved info: " + getGeneralMap().getClass().getName());

        getGeneralMap().add(post);

        writeToFile(getGeneralMap(), GENERAL_FILE, MSG_GENERAL);

        System.out.println("General posts: " + getGeneralMap());


        // You must use a builder to construct a new Protobuffer object
        HelloWorld.PostGeneralResponse response = HelloWorld.PostGeneralResponse.newBuilder()
                .setResult(true).build();

        // Use responseObserver to send a single response back
        responseObserver.onNext(response);

        // When you are done, you must call onCompleted
        responseObserver.onCompleted();

    }


    @Override
    public synchronized void read(HelloWorld.ReadRequest request, StreamObserver<HelloWorld.ReadResponse> responseObserver) {

        String key = request.getKey();
        int number = request.getNumber();

        if (number < 0) {
            Status status = Status.INVALID_ARGUMENT;
            status = status.withDescription("Invalid message number. Number needs to be positive.");
            responseObserver.onError(status.asRuntimeException());
        }

        if (!getParticularMap().containsKey(key)) {
            Status status = Status.INVALID_ARGUMENT;
            status = status.withDescription("Invalid key. There is no user with the specified key.");
            responseObserver.onError(status.asRuntimeException());
        } else {

            ArrayList<HelloWorld.Announcement> tmp = getParticularMap().get(key);
            ArrayList<HelloWorld.Announcement> result = new ArrayList<HelloWorld.Announcement>();

			if (number > 0){
                ListIterator<HelloWorld.Announcement> listIter = tmp.listIterator(tmp.size());
                for(int i = 0; i < number; i++){
                    result.add(listIter.previous());
                }

			} else {
                Collections.reverse(tmp);
				result.addAll(tmp);
			}

			// resolve post IDs into real posts and add them to the response

            for (int i=0; i < result.size(); i++) {

                List<HelloWorld.Announcement> currPostRefs = result.get(i).getAList();

                if (currPostRefs.size() > 0) {
                    HelloWorld.Announcement.Builder currPostBuilder = result.get(i).toBuilder();

                    List<Integer> ids = new ArrayList<Integer>();

                    for (HelloWorld.Announcement ref: currPostRefs) {
                        ids.add(ref.getPostId());
                    }

                    List<HelloWorld.Announcement> updatedPosts = getPost(ids);

                    currPostBuilder.clearA().addAllA(updatedPosts);
                    HelloWorld.Announcement currPost = currPostBuilder.build();
                    result.set(i, currPost);

                }
            }

            // TODO sign response with the private key of the server

            HelloWorld.ReadResponse response = HelloWorld.ReadResponse.newBuilder().addAllResult(result).build();
            responseObserver.onNext(response);

        }

        responseObserver.onCompleted();
    }

    public synchronized void readGeneral(HelloWorld.ReadGeneralRequest request, StreamObserver<HelloWorld.ReadGeneralResponse> responseObserver) {

        int number = request.getNumber();

        if (number < 0) {
            Status status = Status.INVALID_ARGUMENT;
            status = status.withDescription("Invalid message number. Number needs to be positive.");
            responseObserver.onError(status.asRuntimeException());
        }

        ArrayList<HelloWorld.Announcement> general = getGeneralMap();
        ArrayList<HelloWorld.Announcement> result = new ArrayList<HelloWorld.Announcement>();

        // TODO resolve post ID into a real post and add it to the response

        if (number > 0){
            ListIterator<HelloWorld.Announcement> listIter = general.listIterator(general.size());
            for(int i = 0; i < number; i++){
               result.add(listIter.previous());
            }

		} else {
            Collections.reverse(general);
			result.addAll(general);
		}

        // resolve post IDs into real posts and add them to the response

        for (int i=0; i < result.size(); i++) {

            List<HelloWorld.Announcement> currPostRefs = result.get(i).getAList();

            if (currPostRefs.size() > 0) {
                HelloWorld.Announcement.Builder currPostBuilder = result.get(i).toBuilder();

                List<Integer> ids = new ArrayList<Integer>();

                for (HelloWorld.Announcement ref: currPostRefs) {
                    ids.add(ref.getPostId());
                }

                List<HelloWorld.Announcement> updatedPosts = getPost(ids);

                currPostBuilder.clearA().addAllA(updatedPosts);
                HelloWorld.Announcement currPost = currPostBuilder.build();
                result.set(i, currPost);

            }
        }

        // TODO sign response with the private key of the server

        HelloWorld.ReadGeneralResponse response = HelloWorld.ReadGeneralResponse.newBuilder().addAllResult(result).build();
        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    private List<HelloWorld.Announcement> getPost(List<Integer> ids){

        List<HelloWorld.Announcement> result = new ArrayList<HelloWorld.Announcement>();

        for(HelloWorld.Announcement ann : getGeneralMap()) {
            if (ids.contains(ann.getPostId())) {
                result.add(ann);
                ids.removeAll(Arrays.asList(ann.getPostId()));
                if (ids.size() == 0)
                    return result;
            }
        }

            for (Map.Entry<String, ArrayList<HelloWorld.Announcement>> entry : getParticularMap().entrySet()){
                for(HelloWorld.Announcement announcement : entry.getValue()){
                    if(ids.contains(announcement.getPostId())){
                        result.add(announcement);
                        ids.removeAll(Arrays.asList(announcement.getPostId()));
                        if (ids.size() == 0)
                            return result;
                    }
                }
            }


        return result;
    }

}
